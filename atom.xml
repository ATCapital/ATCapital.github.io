<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AT Capital</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://suplandz.github.io/"/>
  <updated>2017-05-03T02:57:47.405Z</updated>
  <id>https://suplandz.github.io/</id>
  
  <author>
    <name>Liu Fangnan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sqlite3笔记</title>
    <link href="https://suplandz.github.io/2017/04/28/sqlite3/"/>
    <id>https://suplandz.github.io/2017/04/28/sqlite3/</id>
    <published>2017-04-28T04:00:00.000Z</published>
    <updated>2017-05-03T02:57:47.405Z</updated>
    
    <content type="html"><![CDATA[<p>sqlite3学习笔记</p>
<a id="more"></a>
<h1 id="基础运用"><a href="#基础运用" class="headerlink" title="基础运用"></a>基础运用</h1><h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><table>
<thead>
<tr>
<th style="text-align:left">功能</th>
<th style="text-align:left">代码</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">查询当前数据库</td>
<td style="text-align:left"><code>.databases</code></td>
</tr>
<tr>
<td style="text-align:left">查询当前表</td>
<td style="text-align:left"><code>.tables</code></td>
</tr>
<tr>
<td style="text-align:left">查询表的详细信息</td>
<td style="text-align:left"><code>.schema</code></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>.mode column</code></td>
</tr>
<tr>
<td style="text-align:left">设置输出列的宽度</td>
<td style="text-align:left"><code>.width 10, 20, 10</code></td>
</tr>
<tr>
<td style="text-align:left">创建数据库</td>
<td style="text-align:left">cmd下<code>$sqlite3 DatabaseName.db</code></td>
</tr>
<tr>
<td style="text-align:left">附加数据库</td>
<td style="text-align:left"><code>ATTACH DATABASE &#39;DatabaseName&#39; As &#39;Alias-Name&#39;;</code></td>
</tr>
<tr>
<td style="text-align:left">分离数据库</td>
<td style="text-align:left"><code>DETACH DATABASE &#39;Alias-Name&#39;;</code></td>
</tr>
<tr>
<td style="text-align:left">创建表</td>
<td style="text-align:left"><code>CREATE TABLE COMPANY(ID INT PRIMARY KEY NOT NULL, NAME TEXT NOT NULL);</code></td>
</tr>
<tr>
<td style="text-align:left">删除表</td>
<td style="text-align:left"><code>DROP TABLE TABLE_NAME;</code></td>
</tr>
<tr>
<td style="text-align:left">添加数据</td>
<td style="text-align:left"><code>INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) VALUES (1, &#39;Paul&#39;, 32, &#39;California&#39;, 20000.00 );</code></td>
</tr>
<tr>
<td style="text-align:left">添加另一个表的数据</td>
<td style="text-align:left"><code>INSERT INTO T_1 [(column1, column2)] SELECT column1, column2 FROM T_2 [WHERE condition];</code></td>
</tr>
<tr>
<td style="text-align:left">选择数据</td>
<td style="text-align:left"><code>SELECT column1, column2 (or *) FROM table_name;</code></td>
</tr>
</tbody>
</table>
<h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">AND/OR/BETWEEN</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">EXISTS</td>
<td style="text-align:left"><code>DELETE FROM employees WHERE EXISTS (SELECT * FROM departments WHERE employees.department_id = departments.department_id AND departments.department_name = &#39;IT&#39;);</code></td>
</tr>
<tr>
<td style="text-align:left">IN/NOT IN</td>
<td style="text-align:left"><code>IN ( 25, 27 ); # 25或者27</code></td>
</tr>
<tr>
<td style="text-align:left">LIKE</td>
<td style="text-align:left">相似值进行比较。<code>SELECT * FROM COMPANY WHERE NAME LIKE &#39;Ki%&#39;;</code></td>
</tr>
<tr>
<td style="text-align:left">GLOB</td>
<td style="text-align:left">和LIKE相似，不同之处在于，它是大小写敏感的。<code>SELECT * FROM COMPANY WHERE NAME GLOB &#39;Ki*&#39;;</code></td>
</tr>
<tr>
<td style="text-align:left">IS NULL</td>
<td style="text-align:left">-</td>
</tr>
<tr>
<td style="text-align:left">丨丨</td>
<td style="text-align:left">连接两个不同的字符串，得到一个新的字符串。</td>
</tr>
<tr>
<td style="text-align:left">UNIQUE</td>
<td style="text-align:left">UNIQUE 运算符搜索指定表中的每一行，确保唯一性（无重复）。</td>
</tr>
</tbody>
</table>
<h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> COMPANY <span class="keyword">WHERE</span> SALARY = <span class="number">10000</span>; <span class="comment">-- 布尔表达式</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="string">"RECORDS"</span> <span class="keyword">FROM</span> COMPANY; <span class="comment">-- 数值表达式</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">CURRENT_TIMESTAMP</span>; <span class="comment">-- 日期表达式</span></div></pre></td></tr></table></figure>
<h2 id="Where"><a href="#Where" class="headerlink" title="Where"></a>Where</h2><p>体会下面两者的区别。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> AGE <span class="keyword">FROM</span> COMPANY</div><div class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> AGE <span class="keyword">FROM</span> COMPANY <span class="keyword">WHERE</span> SALARY &gt; <span class="number">65000</span>);</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> COMPANY</div><div class="line"><span class="keyword">WHERE</span> AGE &gt; (<span class="keyword">SELECT</span> AGE <span class="keyword">FROM</span> COMPANY <span class="keyword">WHERE</span> SALARY &gt; <span class="number">65000</span>);</div></pre></td></tr></table></figure></p>
<h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> COMPANY <span class="keyword">SET</span> ADDRESS = <span class="string">'Texas'</span> <span class="keyword">WHERE</span> <span class="keyword">ID</span> = <span class="number">6</span>;</div><div class="line"><span class="keyword">UPDATE</span> COMPANY <span class="keyword">SET</span> ADDRESS = <span class="string">'Texas'</span>, SALARY = <span class="number">20000.00</span>;</div></pre></td></tr></table></figure>
<h2 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> COMPANY <span class="keyword">WHERE</span> <span class="keyword">ID</span> = <span class="number">7</span>;</div><div class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> COMPANY; <span class="comment">-- delete all</span></div></pre></td></tr></table></figure>
<h2 id="Like"><a href="#Like" class="headerlink" title="Like"></a>Like</h2><p>百分号（%）代表零个、一个或多个数字或字符。下划线（_）代表一个单一的数字或字符。这些符号可以被组合使用。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WHERE SALARY LIKE '_2%3' <span class="comment">-- 查找第二位为 2，且以 3 结尾的任意值</span></div></pre></td></tr></table></figure></p>
<h2 id="Glob"><a href="#Glob" class="headerlink" title="Glob"></a>Glob</h2><p>星号（*）代表零个、一个或多个数字或字符。问号（?）代表一个单一的数字或字符。这些符号可以被组合使用。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WHERE SALARY GLOB '?2*3' -- 查找第二位为 2，且以 3 结尾的任意值</div></pre></td></tr></table></figure></p>
<h2 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h2><p>限制由 SELECT 语句返回的数据数量。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> COMPANY <span class="keyword">LIMIT</span> <span class="number">3</span> <span class="keyword">OFFSET</span> <span class="number">2</span>; <span class="comment">-- 从第三位开始提取 3 个记录</span></div></pre></td></tr></table></figure></p>
<h2 id="Order-By"><a href="#Order-By" class="headerlink" title="Order By"></a>Order By</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> COMPANY <span class="keyword">ORDER</span> <span class="keyword">BY</span> SALARY <span class="keyword">ASC</span>; <span class="comment">-- 升序</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> COMPANY <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">NAME</span> <span class="keyword">DESC</span>; <span class="comment">-- 降序</span></div></pre></td></tr></table></figure>
<h2 id="Group-By"><a href="#Group-By" class="headerlink" title="Group By"></a>Group By</h2><p>在 SELECT 语句中，GROUP BY 子句放在 WHERE 子句之后，放在 ORDER BY 子句之前。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>, <span class="keyword">SUM</span>(SALARY)</div><div class="line"><span class="keyword">FROM</span> COMPANY <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">NAME</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">NAME</span> <span class="keyword">DESC</span>;</div></pre></td></tr></table></figure></p>
<h2 id="Having"><a href="#Having" class="headerlink" title="Having"></a>Having</h2><p>Group by的条件语句，必须连用。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> COMPANY <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">name</span> <span class="keyword">HAVING</span> <span class="keyword">count</span>(<span class="keyword">name</span>) &gt; <span class="number">2</span>;</div></pre></td></tr></table></figure></p>
<h2 id="Distinct"><a href="#Distinct" class="headerlink" title="Distinct"></a>Distinct</h2><p>与 SELECT 语句一起使用，用来消除所有重复的记录。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> COMPANY;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sqlite3学习笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="sqlite" scheme="https://suplandz.github.io/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>python OS</title>
    <link href="https://suplandz.github.io/2017/04/15/python-OS/"/>
    <id>https://suplandz.github.io/2017/04/15/python-OS/</id>
    <published>2017-04-15T04:00:00.000Z</published>
    <updated>2017-05-02T07:58:33.976Z</updated>
    
    <content type="html"><![CDATA[<p>python 打开文件的不同模式<br><a id="more"></a></p>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>只读，指针在文档起始位置</td>
</tr>
<tr>
<td>rb</td>
<td>二进制只读，指针在文档起始位置，推荐</td>
</tr>
<tr>
<td>r+</td>
<td>读写，指针在文档起始位置</td>
</tr>
<tr>
<td>rb+</td>
<td>二进制读写打开，指针在文档起始位置</td>
</tr>
<tr>
<td>w</td>
<td>只写，当文档存在时直接覆盖，当文档不存在时创建</td>
</tr>
<tr>
<td>wb</td>
<td>二进制只写，当文档存在时直接覆盖，当文档不存在时创建</td>
</tr>
<tr>
<td>w+</td>
<td>读写，当文档存在时直接覆盖，当文档不存在时创建</td>
</tr>
<tr>
<td>wb+</td>
<td>二进制读写，当文档存在时直接覆盖，当文档不存在时创建</td>
</tr>
<tr>
<td>a</td>
<td>增补模式，指针在文档结束位置，当文档不存在时创建</td>
</tr>
<tr>
<td>ab</td>
<td>二进制增补模式，指针在文档结束位置，当文档不存在时创建</td>
</tr>
<tr>
<td>a+</td>
<td>增补只读模式，指针在文档结束位置，当文档不存在时创建</td>
</tr>
<tr>
<td>ab+</td>
<td>二进制增补只读模式，指针在文档结束位置，当文档不存在时创建</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 打开文件的不同模式&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>The Python Standard Library</title>
    <link href="https://suplandz.github.io/2017/02/15/python-lib/"/>
    <id>https://suplandz.github.io/2017/02/15/python-lib/</id>
    <published>2017-02-15T04:00:00.000Z</published>
    <updated>2017-05-02T07:58:33.487Z</updated>
    
    <content type="html"><![CDATA[<p>Python基本库查阅<br><a href="https://docs.python.org/2/library/index.html" target="_blank" rel="external">参考资料</a></p>
<a id="more"></a>
<h2 id="1-内建函数"><a href="#1-内建函数" class="headerlink" title="1.内建函数"></a>1.内建函数</h2><p>|abs(x)|返回绝对值|<br>|chr(i)||<br>|zip([iterable, …])|类似map(None, iterable, iterable)，返回包含tuple的list<br>|map(function, iterable, …)|将funtion运用到iterable中，如果有多个参数就多加个iterable</p>
<h2 id="2-内置类型"><a href="#2-内置类型" class="headerlink" title="2. 内置类型"></a>2. 内置类型</h2><h3 id="2-8-Dict"><a href="#2-8-Dict" class="headerlink" title="2.8 Dict"></a>2.8 Dict</h3><p>|<code>keys()</code>|返回key的list<br>|<code>items()</code>|返回(key, value)的list  </p>
<h2 id="3-String模块"><a href="#3-String模块" class="headerlink" title="3. String模块"></a>3. String模块</h2><h2 id="4-Data模块"><a href="#4-Data模块" class="headerlink" title="4. Data模块"></a>4. Data模块</h2><h2 id="5-数学模块"><a href="#5-数学模块" class="headerlink" title="5. 数学模块"></a>5. 数学模块</h2><h3 id="5-6-random"><a href="#5-6-random" class="headerlink" title="5.6 random"></a>5.6 random</h3><p>生成假随机数，很多方法numpy也有。</p>
<p>|<code>random.seed(a=None)</code>|类似以撒的seed，产生随机数顺序一样|<br>|<code>random.uniform(a, b)</code>|返回随机数 [a,b]，ab位置可换<br>|<code>random.randint(a, b)</code>|返回随机整数a &lt;= N &lt;= b|<br>|<code>random.choice(seq)</code>|随机返回seq的一个值，空则<code>IndexError</code><br>|<code>random.random()</code>|返回 [0,1)<br>|<code>random.gauss(mu, sigma)</code>|高斯分布又叫正态分布，稍比<code>normalvariate</code>快<br>|<code>random.normalvariate(mu, sigma)</code>|正态分布同上</p>
<h2 id="6-文件目录访问"><a href="#6-文件目录访问" class="headerlink" title="6. 文件目录访问"></a>6. 文件目录访问</h2><h2 id="7-数据存储"><a href="#7-数据存储" class="headerlink" title="7. 数据存储"></a>7. 数据存储</h2><h3 id="7-1-pickle"><a href="#7-1-pickle" class="headerlink" title="7.1 pickle"></a>7.1 pickle</h3><p>此模块是Python内置用于数据存储的库，把变量从内存存入到文件的过程。Pickle有通过C优化后的兄弟库叫cPickle，官方说法快1000倍，所以使用时这样引用:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">import</span> cPickle <span class="keyword">as</span> pickle</div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    <span class="keyword">import</span> pickle</div></pre></td></tr></table></figure>
<ul>
<li><p>录入数据</p>
<p>|<code>pickle.dump(obj, file[, protocol])</code><br>|导出到文件</p>
<p>|<code>pickle.dumps(obj[, protocol])</code><br>|导出为字符串</p>
<p>|Protocol|描述<br>|0|original ASCII 默认值<br>|1|old binary format<br>|2|more efficient<br>|negative|HIGHEST_PROTOCOL will be used</p>
</li>
<li><p>读取数据</p>
<p>|<code>pickle.load(file)</code><br>|从文件读取数据</p>
<p>|<code>pickle.loads(string)</code><br>|从字符串读取数据</p>
<p>Pickle 每次序列化生成的字符串有独立头尾，按照先进先出（FIFO）的顺序保存，可以建个字典存储读取。pickle.load() 只会读取一个完整的结果，所以你只需要在 load 一次之后再 load 一次，就能读到第二次序列化的数据。如果不知道文件里有多少 pickle 对象，可以在 while 循环中反复 load 文件对象，直到抛出异常为止。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python基本库查阅&lt;br&gt;&lt;a href=&quot;https://docs.python.org/2/library/index.html&quot;&gt;参考资料&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从雅虎财经获取数据说起</title>
    <link href="https://suplandz.github.io/2017/02/09/yahoo-finance/"/>
    <id>https://suplandz.github.io/2017/02/09/yahoo-finance/</id>
    <published>2017-02-09T09:00:00.000Z</published>
    <updated>2017-05-02T08:10:45.693Z</updated>
    
    <content type="html"><![CDATA[<p>一些非常简单的试验。<br><a id="more"></a></p>
<p>这篇主要梳理下使用<code>pandas-datareader</code>来获取财经数据进行简单分析的过程。<code>pandas-datareader</code>之前是封装在<code>pandas</code>里，但之后被移除，所以需要单独安装下<code>$ pip install pandas-datareader</code>。行情数据在<code>data</code>类下，调用方法<code>import pandas_datareader.data as web</code>。</p>
<p><a href="https://pandas-datareader.readthedocs.io/en/latest/index.html" target="_blank" rel="external">Doc说明文档</a></p>
<ul>
<li><p>首先使用DataReader函数获取数据。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df = web.DataReader(<span class="string">'600030.SS'</span>, <span class="string">'yahoo'</span>, start, end)</div></pre></td></tr></table></figure>
</li>
<li><p>计算对数收益率:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">df[<span class="string">'return'</span>] = np.log(df[<span class="string">'Close'</span>] / df[<span class="string">'Close'</span>].shift(<span class="number">1</span>))</div><div class="line">df[[<span class="string">'Close'</span>, <span class="string">'return'</span>]].plot(subplots=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<p>可以观察波动率和收盘价的关系。</p>
</li>
<li><p>计算移动平均值：<br>使用<a href="/python/2017/01/25/pandas/#pandasdataframerolling"><code>pd.rolling函数</code></a>创建一行新列，再绘图观察即可。具体的代码是：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">df[<span class="string">'21d'</span>] = df[<span class="string">'Close'</span>].rolling(windows=<span class="number">21</span>).mean()</div><div class="line">df[[<span class="string">'Close'</span>, <span class="string">'21d'</span>]].plot()</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p>实际上到这里就画出了收盘价线和移动平均线，简单的居于均线趋势分析的方法就可以在这里开始检验了，是不是很简单呢。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些非常简单的试验。&lt;br&gt;
    
    </summary>
    
    
      <category term="pandas" scheme="https://suplandz.github.io/tags/pandas/"/>
    
      <category term="python" scheme="https://suplandz.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib库使用简介</title>
    <link href="https://suplandz.github.io/2017/02/06/matplotlib/"/>
    <id>https://suplandz.github.io/2017/02/06/matplotlib/</id>
    <published>2017-02-06T09:00:00.000Z</published>
    <updated>2017-05-02T07:58:32.398Z</updated>
    
    <content type="html"><![CDATA[<p>matplotlib使用笔记。</p>
<a id="more"></a>
<p>绘图函数主要在子库matplotlib.pyplot中，下面介绍的都是pyplot的函数。</p>
<pre><code>import matplotlib.pyplot as plt
</code></pre><h1 id="pyplot类"><a href="#pyplot类" class="headerlink" title="pyplot类"></a>pyplot类</h1><h2 id="figure函数"><a href="#figure函数" class="headerlink" title="figure函数"></a>figure函数</h2><p>|创建图层<br>|<code>matplotlib.pyplot.figure(num=None, figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, FigureClass=&lt;class &#39;matplotlib.figure.Figure&#39;&gt;, **kwargs)</code><br>|<code>plt.figure(figsiz=(7,4))</code></p>
<h2 id="plot函数"><a href="#plot函数" class="headerlink" title="plot函数"></a>plot函数</h2><p>|绘图，<a href="http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.plot" target="_blank" rel="external">线条参数，颜色参数</a><br>|<code>matplotlib.pyplot.plot(*args, **kwargs)</code><br>|<code>plot(x, y, &#39;bo&#39;)  # plot x and y using blue circle markers</code></p>
<p>|参数|例子<br>|linewidth or lw|<code>lw=1.5</code></p>
<h2 id="grid函数"><a href="#grid函数" class="headerlink" title="grid函数"></a>grid函数</h2><p>|显隐网格<br>|<code>matplotlib.pyplot.grid(b=None, which=&#39;major&#39;, axis=&#39;both&#39;, **kwargs)</code><br>|<code>ax.grid(True)</code><br><code>ax.grid(color=&#39;r&#39;, linestyle=&#39;-&#39;, linewidth=2)</code></p>
<h2 id="axis函数，xlim函数，ylim函数"><a href="#axis函数，xlim函数，ylim函数" class="headerlink" title="axis函数，xlim函数，ylim函数"></a>axis函数，xlim函数，ylim函数</h2><p>|坐标轴设置<br>|<code>matplotlib.pyplot.axis(*v, **kwargs)</code><br>|<code>axis(v)  # 设置坐标极值 v = [xmin, xmax, ymin, ymax]</code><br><code>axis(&#39;off&#39;)  # 关闭</code><br><code>axis(&#39;equal&#39;)  # 等刻度</code><br><code>axis(&#39;tight&#39;)  # 边界和数据重叠</code><br><code>axis(&#39;image&#39;)  # 所有数据可见</code></p>
<p>|设置或者获取边界<br>|<code>matplotlib.pyplot.xlim(*args, **kwargs)</code><br>|<code>xmin, xmax = xlim()  # return the current xlim</code><br><code>xlim( (xmin, xmax) )  # set the xlim to xmin, xmax</code><br><code>xlim( xmin, xmax )  # set the xlim to xmin, xmax</code><br><code>xlim(xmax=3)  # adjust the max leaving min unchanged</code></p>
<h2 id="xlabel函数，ylabel函数，title函数"><a href="#xlabel函数，ylabel函数，title函数" class="headerlink" title="xlabel函数，ylabel函数，title函数"></a>xlabel函数，ylabel函数，title函数</h2><p>|设置标签<br>|<code>matplotlib.pyplot.xlabel(s, *args, **kwargs)</code><br><code>matplotlib.pyplot.ylabel(s, *args, **kwargs)</code><br><code>matplotlib.pyplot.title(s, *args, **kwargs)</code><br>|<code>plt.title(&#39;title&#39;)</code></p>
<h2 id="legend函数"><a href="#legend函数" class="headerlink" title="legend函数"></a>legend函数</h2><p>|设置图例格式位置等等，<a href="http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.legend" target="_blank" rel="external">具体参数</a><br>|<code>matplotlib.pyplot.legend(*args, **kwargs)</code><br>|<code>plt.legend(loc=0)</code></p>
<h2 id="subplots函数和subplot函数"><a href="#subplots函数和subplot函数" class="headerlink" title="subplots函数和subplot函数"></a>subplots函数和subplot函数</h2><p>|创建子图，如果有多图使用此函数<br>|<code>matplotlib.pyplot.subplots(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, subplot_kw=None, gridspec_kw=None, **fig_kw)</code><br>|<code>fig, (ax1, ax2) = plt.subplots(1, 2, sharey=True)  # 这里的1，2代表图表的排列</code><br><code>ax1.plot(x, y)  # 直接用轴类的方法就可以了</code><br><code>ax1.set_title(&#39;Sharing Y axis&#39;)</code><br><code>ax2.scatter(x, y)</code></p>
<p>|也可以使用subplot函数画子图，不过没有subplots直观。subplot函数的作用是规划子图的位置。<br>|<code>subplot(nrows, ncols, plot_number)</code></p>
<h2 id="scatter函数"><a href="#scatter函数" class="headerlink" title="scatter函数"></a>scatter函数</h2><p>|根据x，y画散点图<br>|<code>matplotlib.pyplot.scatter(x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, verts=None, edgecolors=None, **kwargs)</code><br>|</p>
<h2 id="hist函数"><a href="#hist函数" class="headerlink" title="hist函数"></a>hist函数</h2><p>|直方图<br>|<code>matplotlib.pyplot.hist(x, bins=None, range=None, normed=False, weights=None, cumulative=False, bottom=None, histtype=&#39;bar&#39;, align=&#39;mid&#39;, orientation=&#39;vertical&#39;, rwidth=None, log=False, color=None, label=None, stacked=False, hold=None, data=None, **kwargs)</code><br>|</p>
<h1 id="Axes类"><a href="#Axes类" class="headerlink" title="Axes类"></a>Axes类</h1><p>常用的方法（散点图，直方图等）在此类中也通用。</p>
<p><a href="http://matplotlib.org/api/axes_api.html#axes-class" target="_blank" rel="external">参考资料</a></p>
<h2 id="twinx函数"><a href="#twinx函数" class="headerlink" title="twinx函数"></a>twinx函数</h2><p>|设置y的次坐标轴<br>|<code>Axes.twinx()</code><br>|<code>ax2 = ax1.twinx()</code></p>
<h2 id="set-title函数"><a href="#set-title函数" class="headerlink" title="set_title函数"></a>set_title函数</h2><p>|设置坐标轴标题<br>|<code>Axes.set_title(label, fontdict=None, loc=&#39;center&#39;, **kwargs)</code><br>|<code>ax1.set_title(&#39;title&#39;)</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;matplotlib使用笔记。&lt;/p&gt;
    
    </summary>
    
    
      <category term="matplotlib" scheme="https://suplandz.github.io/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>NumPy库使用简介</title>
    <link href="https://suplandz.github.io/2017/02/05/numpy/"/>
    <id>https://suplandz.github.io/2017/02/05/numpy/</id>
    <published>2017-02-05T08:00:00.000Z</published>
    <updated>2017-05-03T02:55:57.714Z</updated>
    
    <content type="html"><![CDATA[<p>NumPy使用笔记。</p>
<a id="more"></a>
<h1 id="Quick-Sheet"><a href="#Quick-Sheet" class="headerlink" title="Quick Sheet"></a>Quick Sheet</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">arr = np.array([]) <span class="comment"># 创立numpy数组</span></div><div class="line">arr.T <span class="comment"># 转置</span></div><div class="line">arr[ : :<span class="number">-1</span>] <span class="comment"># reverse</span></div><div class="line">arr.shape <span class="comment"># 显示数组结构</span></div><div class="line">arr.reshape <span class="comment"># 重构数组</span></div><div class="line">arr.size <span class="comment"># shape结果的乘积</span></div><div class="line">arr.dtype <span class="comment"># arr.dtype.name</span></div><div class="line">np.arange( <span class="number">0</span>, <span class="number">2</span>, <span class="number">0.3</span> ) <span class="comment"># array([ 0. ,  0.3,  0.6,  0.9,  1.2,  1.5,  1.8])</span></div><div class="line">np.linspace( <span class="number">0</span>, <span class="number">2</span>, <span class="number">9</span> ) <span class="comment"># array([ 0.  ,  0.25,  0.5 ... 1.75,  2.  ])</span></div><div class="line">np.sum(arr) <span class="comment"># 求和</span></div><div class="line">np.mean(arr) <span class="comment"># 均数</span></div><div class="line">np.std(arr) <span class="comment"># 标准差</span></div><div class="line">np.sqrt(arr) <span class="comment"># 平方根</span></div><div class="line">np.floor(arr) <span class="comment"># 向下取整</span></div><div class="line">np.dot(arr1, arr2) <span class="comment"># 点积</span></div><div class="line">np.vectorize() <span class="comment"># 向量化 vfunc = np.vectorize(myfunc)</span></div></pre></td></tr></table></figure>
<p>注意 <code>np.sin</code> 不要与 <code>math.sin</code> 覆盖。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line">math.sin()</div></pre></td></tr></table></figure></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><h2 id="Arrary-Object"><a href="#Arrary-Object" class="headerlink" title="Arrary Object"></a>Arrary Object</h2><h3 id="ndarray"><a href="#ndarray" class="headerlink" title="ndarray"></a>ndarray</h3><p>创立的数组里属于此类，此类可以进行向量化运算，可以使用 <code>x[row][column]</code> 查值。<br>常用方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">np.sum(axis, dtype) <span class="comment"># 按照axis, dtype求和</span></div><div class="line">np.cumsum(axis, dtype) <span class="comment"># 按照axis, dtype累计求和</span></div><div class="line">np.std(axis, dtype) <span class="comment"># 按照axis, dtype求标准差</span></div></pre></td></tr></table></figure></p>
<h3 id="dtype"><a href="#dtype" class="headerlink" title="dtype"></a>dtype</h3><p><a href="https://docs.scipy.org/doc/numpy/reference/arrays.dtypes.html" target="_blank" rel="external">Data type</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">x = np.float32(<span class="number">1.0</span>)</div><div class="line">d = np.dtype(int)</div><div class="line"><span class="comment"># 结构数组</span></div><div class="line">dt = np.dtype([(<span class="string">'Name'</span>, <span class="string">'S10'</span>), (<span class="string">'Age'</span>, <span class="string">'i4'</span>)])</div><div class="line">s = np.array([(<span class="string">'Smith'</span>, <span class="number">45</span>), (<span class="string">'Jones'</span>, <span class="number">53</span>)], dtype = dt)</div></pre></td></tr></table></figure></p>
<h2 id="Routines"><a href="#Routines" class="headerlink" title="Routines"></a>Routines</h2><h3 id="Arrary-Creation"><a href="#Arrary-Creation" class="headerlink" title="Arrary Creation"></a>Arrary Creation</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># numpy.array</span></div><div class="line">numpy.array(object, dtype=<span class="keyword">None</span>, copy=<span class="keyword">True</span>, order=<span class="string">'K'</span>, subok=<span class="keyword">False</span>, ndmin=<span class="number">0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=complex)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>array([ <span class="number">1.</span>+<span class="number">0.j</span>,  <span class="number">2.</span>+<span class="number">0.j</span>,  <span class="number">3.</span>+<span class="number">0.j</span>])</div><div class="line"></div><div class="line"><span class="comment"># numpy.zeros</span></div><div class="line"><span class="comment"># 创建一个用0填充的数组</span></div><div class="line">numpy.zeros(shape, dtype=float, order=<span class="string">'C'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.zeros((<span class="number">5</span>,), dtype=np.int)</div><div class="line">array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</div><div class="line"></div><div class="line"><span class="comment"># numpy.empty</span></div><div class="line"><span class="comment"># 生成用随机数填充的数组，速度较快，不推荐使用</span></div><div class="line">numpy.empty(shape, dtype=float, order=<span class="string">'C'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.empty([<span class="number">2</span>, <span class="number">2</span>], dtype=int)</div><div class="line">array([[<span class="number">-1073741821</span>, <span class="number">-1067949133</span>], [<span class="number">496041986</span>, <span class="number">19249760</span>]]) <span class="comment"># random</span></div></pre></td></tr></table></figure>
<h3 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">numpy.random.standard_normal(size=<span class="keyword">None</span>) <span class="comment"># 模拟标准正态分布的样本</span></div><div class="line">s = np.random.standard_normal((<span class="number">4</span>,<span class="number">3</span>))</div><div class="line">numpy.random.randint(low, high=<span class="keyword">None</span>, size=<span class="keyword">None</span>, dtype=<span class="string">'l'</span>) <span class="comment"># 返回随机整数, int</span></div></pre></td></tr></table></figure>
<h3 id="Mathematical-functions"><a href="#Mathematical-functions" class="headerlink" title="Mathematical functions"></a>Mathematical functions</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">np.log([<span class="number">1</span>, np.e, np.e**<span class="number">2</span>, <span class="number">0</span>])</div><div class="line"><span class="comment"># numpy.log，numpy.log10，numpy.log2，numpy.log1p</span></div><div class="line"><span class="comment"># log1p == log(1+x)</span></div></pre></td></tr></table></figure>
<h3 id="Logic-functions"><a href="#Logic-functions" class="headerlink" title="Logic functions"></a>Logic functions</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># allclose</span></div><div class="line"><span class="comment"># 如果两个数组在一定误差范围内则返回True</span></div><div class="line"><span class="comment"># absolute(a - b) &lt;= (atol + rtol * absolute(b))</span></div><div class="line">numpy.allclose(a, b, rtol=<span class="number">1e-05</span>, atol=<span class="number">1e-08</span>, equal_nan=<span class="keyword">False</span>)</div><div class="line">np.allclose([<span class="number">1.0</span>, np.nan], [<span class="number">1.0</span>, np.nan], equal_nan=<span class="keyword">True</span>)  <span class="comment"># True</span></div></pre></td></tr></table></figure>
<p>Ref:<br>[1]: <a href="https://docs.scipy.org/doc/numpy/contents.html" target="_blank" rel="external">NumPy manual contents</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NumPy使用笔记。&lt;/p&gt;
    
    </summary>
    
    
      <category term="numpy" scheme="https://suplandz.github.io/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>吉他谱</title>
    <link href="https://suplandz.github.io/2017/02/04/guitar-tab/"/>
    <id>https://suplandz.github.io/2017/02/04/guitar-tab/</id>
    <published>2017-02-04T10:00:00.000Z</published>
    <updated>2017-05-02T08:09:46.727Z</updated>
    
    <content type="html"><![CDATA[<p>吉他谱记录。<br><a id="more"></a></p>
<h2 id="小拳拳捶你胸口"><a href="#小拳拳捶你胸口" class="headerlink" title="小拳拳捶你胸口"></a>小拳拳捶你胸口</h2><table>
<thead>
<tr>
<th style="text-align:left">capo 5</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">C - G - F - G - C</td>
</tr>
<tr>
<td style="text-align:left">(｡•ˇ‸ˇ•｡)哼！都怪你 (`ȏ´) 也不哄哄人家(〃′o`)</td>
</tr>
<tr>
<td style="text-align:left">C - G - F - G - C</td>
</tr>
<tr>
<td style="text-align:left">(〃′o`)人家超想哭的，捶你胸口，老公！大坏蛋！！！(￣^￣)ゞ</td>
</tr>
<tr>
<td style="text-align:left">C - G - F - G - C</td>
</tr>
<tr>
<td style="text-align:left">(￣^￣)ゞ咩QAQ 捶你胸口 你好讨厌！(=ﾟωﾟ)</td>
</tr>
<tr>
<td style="text-align:left">C - G</td>
</tr>
<tr>
<td style="text-align:left">(｡•︿•̀｡)大坏蛋(｡•ˇ‸ˇ•｡)，打死你(つд⊂)</td>
</tr>
<tr>
<td style="text-align:left">F - G - C</td>
</tr>
<tr>
<td style="text-align:left">(｡•︿•̀｡)大坏蛋(｡•ˇ‸ˇ•｡)，打死你(つд⊂)</td>
</tr>
<tr>
<td style="text-align:left">F - C - G - Am - F - G - C</td>
</tr>
<tr>
<td style="text-align:left">(=ﾟωﾟ)ﾉ要抱抱嘤嘤嘤哼，人家拿小拳拳捶你胸口！！！(｡•︿•̀｡)</td>
</tr>
<tr>
<td style="text-align:left">F - C - G - Am - F - G - C</td>
</tr>
<tr>
<td style="text-align:left">(=ﾟωﾟ)ﾉ要抱抱嘤嘤嘤哼，人家拿小拳拳捶你胸口！！！(｡•︿•̀｡)</td>
</tr>
</tbody>
</table>
<p><a href="http://www.bilibili.com/video/av8348417/" target="_blank" rel="external">【秋风MusiX】教你如何用吉他把【小拳拳捶你胸口】编成歌</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;吉他谱记录。&lt;br&gt;
    
    </summary>
    
    
      <category term="guitar" scheme="https://suplandz.github.io/tags/guitar/"/>
    
  </entry>
  
  <entry>
    <title>量化常用策略</title>
    <link href="https://suplandz.github.io/2017/02/02/strategy/"/>
    <id>https://suplandz.github.io/2017/02/02/strategy/</id>
    <published>2017-02-02T10:00:00.000Z</published>
    <updated>2017-05-02T07:58:30.398Z</updated>
    
    <content type="html"><![CDATA[<p><strong>策略</strong>-&gt;系统-&gt;执行-&gt;反馈</p>
<a id="more"></a>
<h1 id="交易的本质"><a href="#交易的本质" class="headerlink" title="交易的本质"></a>交易的本质</h1><p>低买高卖，寻找自我。</p>
<h1 id="交易的理念"><a href="#交易的理念" class="headerlink" title="交易的理念"></a>交易的理念</h1><p>均值回归&amp;趋势延伸。<br>mean-reversion&amp;momentum<br>一个完美的策略应该是结合上诉这两点的，简单的打个比方，在上涨趋势的回调处做多。</p>
<h1 id="策略简介"><a href="#策略简介" class="headerlink" title="策略简介"></a>策略简介</h1><p>注：每个人适合的策略都不一样，也就是风险偏好不一样，如果选择不当，就会成为别人的alpha哦。</p>
<ul>
<li>资本增值<ol>
<li>长周期<ul>
<li>整体经济的不断发展，周期性-&gt;长周期的beta策略<br>长周期的beta策略莫过于指数定投，个人还是非常喜欢这类策略的，简单粗暴，似乎有很多人认为这类策略的收益率不是很高，其实不是这样的。定投的关键的降低平均持仓成本，如果加上一些模式识别会产生非常好的效果。对于一般以理财为目的的人来说，定投指数ETF是非常好的选择，性价比非常高。</li>
<li>价值投资，低估值-&gt;多因子选股</li>
</ul>
</li>
<li>短周期<ul>
<li>技术面的撑压线-&gt;模式识别，趋势反转</li>
<li>突破战法</li>
</ul>
</li>
</ol>
</li>
<li>人性的弱点<ol>
<li>追涨杀跌（贪婪恐惧）</li>
</ol>
<ul>
<li>趋势策略<br>最有名的趋势策略莫过海龟策略，一个长期期望为正的策略，缺点就是回撤太大。如果周期选的过小则无法过滤无效波动，算上交易手续费会产生极大的亏损，但周期过大则会产生极大的滑点，回撤也会难以接受，而中间的调参又会陷入一个过度优化的悖论，时至今日感觉似乎有点鸡肋。不过目前在国内市场中很多CTA的策略还是以趋势为主，周期较短，还是有待考察。个人认为股票市场中长周期的趋势策略跟指数定投收益接近，而指数定投所花费的其他成本更低。</li>
</ul>
<ol>
<li>逐利性</li>
<li>便宜货</li>
</ol>
</li>
<li>均值回归（择时策略）<ul>
<li>套利</li>
<li>统计套利</li>
</ul>
</li>
<li>做市策略</li>
<li>信息不对称<ul>
<li>内幕交易</li>
<li>操纵市场</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;策略&lt;/strong&gt;-&amp;gt;系统-&amp;gt;执行-&amp;gt;反馈&lt;/p&gt;
    
    </summary>
    
    
      <category term="策略" scheme="https://suplandz.github.io/tags/%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>Pandas库使用简介</title>
    <link href="https://suplandz.github.io/2017/01/25/pandas/"/>
    <id>https://suplandz.github.io/2017/01/25/pandas/</id>
    <published>2017-01-25T08:00:00.000Z</published>
    <updated>2017-05-03T12:25:56.917Z</updated>
    
    <content type="html"><![CDATA[<p>Pandas学习笔记。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div></pre></td></tr></table></figure>
<h2 id="IO-Tools"><a href="#IO-Tools" class="headerlink" title="IO Tools"></a>IO Tools</h2><h3 id="Flat-File"><a href="#Flat-File" class="headerlink" title="Flat File"></a>Flat File</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># CSV</span></div><div class="line">df = pd.read_csv(<span class="string">'foo.csv'</span>, index_col=<span class="number">0</span>, parse_dates=<span class="keyword">True</span>)</div><div class="line"><span class="comment"># or index_col='date' 将data列作为index，并且解析日期</span></div><div class="line">pd.read_csv(<span class="string">'tmp.csv'</span>, dayfirst=<span class="keyword">True</span>, parse_dates=[<span class="number">0</span>]) <span class="comment"># 以DD/MM解析首列信息</span></div><div class="line">df = pd.read_csv(<span class="string">'tmp.csv'</span>, sep=<span class="string">'|'</span>, thousands=<span class="string">','</span>)</div><div class="line"><span class="comment"># Patient1|123,000|x &gt;&gt;&gt; 0 Patient1 123000 x</span></div><div class="line">data = <span class="string">'skip this skip it\na,b,c\n1,2,3\n4,5,6\n7,8,9'</span></div><div class="line">pd.read_csv(StringIO(data), header=<span class="number">1</span>)</div><div class="line"><span class="comment"># header是标题行的起始位置，None就是没有，0就是第一行</span></div></pre></td></tr></table></figure>
<h2 id="Time-Series"><a href="#Time-Series" class="headerlink" title="Time Series"></a>Time Series</h2><h3 id="Timestamps"><a href="#Timestamps" class="headerlink" title="Timestamps"></a>Timestamps</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line">pd.Timestamp(datetime(<span class="number">2012</span>, <span class="number">5</span>, <span class="number">1</span>)) <span class="comment"># Timestamp('2012-05-01 00:00:00')</span></div><div class="line">pd.Timestamp(<span class="string">'2012-05-01'</span>)</div><div class="line">pd.Timestamp(<span class="number">2012</span>, <span class="number">5</span>, <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># Converting to Timestamps</span></div><div class="line">pd.to_datetime(pd.Series([<span class="string">'Jul 31, 2009'</span>, <span class="string">'2010-01-10'</span>, <span class="keyword">None</span>]))</div><div class="line">pd.to_datetime([<span class="string">'04-01-2012 10:00'</span>], dayfirst=<span class="keyword">True</span>)</div><div class="line">pd.to_datetime([<span class="string">'2009/07/31'</span>, <span class="string">'asd'</span>], errors=<span class="string">'raise'</span>) <span class="comment"># ValueError: Unknown string format</span></div><div class="line">pd.to_datetime([<span class="string">'2009/07/31'</span>, <span class="string">'asd'</span>], errors=<span class="string">'ignore'</span>) <span class="comment"># return original input</span></div><div class="line">pd.to_datetime([<span class="string">'2009/07/31'</span>, <span class="string">'asd'</span>], errors=<span class="string">'coerce'</span>) <span class="comment"># Return NaT</span></div><div class="line"></div><div class="line"><span class="comment"># Epoch Timestamps</span></div><div class="line">pd.to_datetime([<span class="number">1</span>, <span class="number">3.14</span>], unit=<span class="string">'s'</span>) <span class="comment"># 以s计算</span></div><div class="line">&gt;&gt;&gt;DatetimeIndex([<span class="string">'1970-01-01 00:00:01'</span>, <span class="string">'1970-01-01 00:00:03.140000'</span>], dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="keyword">None</span>)</div><div class="line"></div><div class="line">start = datetime(<span class="number">2011</span>, <span class="number">1</span>, <span class="number">1</span>)</div><div class="line">end = datetime(<span class="number">2012</span>, <span class="number">1</span>, <span class="number">1</span>)</div><div class="line">rng = pd.date_range(start, end)</div><div class="line">rng = pd.bdate_range(start, end) <span class="comment"># business day</span></div><div class="line">pd.date_range(start, end, freq=<span class="string">'BM'</span>)</div><div class="line">pd.bdate_range(end=end, periods=<span class="number">20</span>)</div></pre></td></tr></table></figure>
<h3 id="DatetimeIndex"><a href="#DatetimeIndex" class="headerlink" title="DatetimeIndex"></a><a href="http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases" target="_blank" rel="external">DatetimeIndex</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">rng = pd.date_range(start, end, freq=<span class="string">'BM'</span>)</div><div class="line">ts = pd.Series(np.random.randn(len(rng)), index=rng)</div><div class="line">ts[<span class="string">'10/31/2011'</span>:<span class="string">'12/31/2011'</span>] <span class="comment"># 取出之间的数据</span></div><div class="line">ts[<span class="string">'2011'</span>] <span class="comment"># 取出2011年全年数据</span></div><div class="line">dft = pd.DataFrame(randn(<span class="number">100000</span>,<span class="number">1</span>), columns=[<span class="string">'A'</span>], index=pd.date_range(<span class="string">'20130101'</span>,periods=<span class="number">100000</span>,freq=<span class="string">'T'</span>))</div><div class="line">dft[datetime(<span class="number">2013</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">0</span>):datetime(<span class="number">2013</span>, <span class="number">2</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">0</span>)]</div><div class="line"></div><div class="line"><span class="comment"># Truncating &amp; Fancy Indexing</span></div><div class="line">ts.truncate(before=<span class="string">'10/31/2011'</span>, after=<span class="string">'12/31/2011'</span>)</div></pre></td></tr></table></figure>
<h3 id="DateOffset"><a href="#DateOffset" class="headerlink" title="DateOffset"></a><a href="http://pandas.pydata.org/pandas-docs/stable/timeseries.html#dateoffset-objects" target="_blank" rel="external">DateOffset</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pandas.tseries.offsets <span class="keyword">import</span> *</div><div class="line">d = datetime(<span class="number">2008</span>, <span class="number">8</span>, <span class="number">18</span>, <span class="number">9</span>, <span class="number">0</span>)</div><div class="line">d + DateOffset(months=<span class="number">4</span>, days=<span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Timestamp(<span class="string">'2008-12-23 09:00:00'</span>)</div><div class="line">d - <span class="number">5</span> * BDay()</div><div class="line">d + BMonthEnd() <span class="comment"># 最近的business month end</span></div><div class="line">offset = BMonthEnd()</div><div class="line">offset.rollforward(d) <span class="comment"># 往后最近的BMonthEnd</span></div><div class="line">offset.rollback(d) <span class="comment"># 往前最近的BMonthEnd</span></div><div class="line">day = Day(normalize=<span class="keyword">True</span>)</div><div class="line">day.apply(pd.Timestamp(<span class="string">'2014-01-01 09:00'</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Timestamp(<span class="string">'2014-01-02 00:00:00'</span>)</div><div class="line">hour = Hour(normalize=<span class="keyword">True</span>)</div><div class="line">hour.apply(pd.Timestamp(<span class="string">'2014-01-01 22:00'</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Timestamp(<span class="string">'2014-01-01 00:00:00'</span>)</div><div class="line">d + YearEnd(month=<span class="number">6</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Timestamp(<span class="string">'2009-06-30 09:00:00'</span>)</div><div class="line"></div><div class="line"><span class="comment"># Using offsets with Series / DatetimeIndex</span></div><div class="line">rng = pd.date_range(<span class="string">'2012-01-01'</span>, <span class="string">'2012-01-03'</span>)</div><div class="line">s = pd.Series(rng)</div><div class="line">s + DateOffset(months=<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment"># Converting to Python datetimes</span></div><div class="line">d.to_pydatetime()</div></pre></td></tr></table></figure>
<h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Creation</span></div><div class="line">s = pd.Series(data, index=index) <span class="comment"># Series是一维数组</span></div><div class="line">pd.Series(np.random.randn(<span class="number">5</span>), index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]) <span class="comment"># From ndarray</span></div><div class="line">pd.Series(d = &#123;<span class="string">'a'</span> : <span class="number">0.</span>, <span class="string">'b'</span> : <span class="number">1.</span>, <span class="string">'c'</span> : <span class="number">2.</span>&#125;) <span class="comment"># From dict</span></div><div class="line">pd.Series(<span class="number">5.</span>, index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]) <span class="comment"># From scalar value</span></div><div class="line"></div><div class="line"><span class="comment"># usage，常规函数见DataFrame</span></div><div class="line">s[s &gt; s.median()]</div><div class="line">s[[<span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>]]</div><div class="line">np.exp(s)</div><div class="line">s[<span class="string">'a'</span>]</div><div class="line">s.get(<span class="string">'f'</span>, np.nan) <span class="comment"># 取值</span></div></pre></td></tr></table></figure>
<h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Creation</span></div><div class="line"><span class="comment"># From dict of Series or dicts</span></div><div class="line">d = &#123;<span class="string">'one'</span> : pd.Series([<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]), <span class="string">'two'</span> : pd.Series([<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>, <span class="number">4.</span>])&#125;</div><div class="line">pd.DataFrame(d, index=[<span class="string">'d'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>], columns=[<span class="string">'two'</span>, <span class="string">'three'</span>])</div><div class="line"><span class="comment"># From dict of ndarrays / lists</span></div><div class="line">d = &#123;<span class="string">'one'</span> : [<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>, <span class="number">4.</span>], <span class="string">'two'</span> : [<span class="number">4.</span>, <span class="number">3.</span>, <span class="number">2.</span>, <span class="number">1.</span>]&#125;</div><div class="line">pd.DataFrame(d, index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</div><div class="line"><span class="comment"># From structured or record array</span></div><div class="line">data = np.zeros((<span class="number">2</span>,), dtype=[(<span class="string">'A'</span>, <span class="string">'i4'</span>),(<span class="string">'B'</span>, <span class="string">'f4'</span>),(<span class="string">'C'</span>, <span class="string">'a10'</span>)])</div><div class="line">data[:] = [(<span class="number">1</span>,<span class="number">2.</span>,<span class="string">'Hello'</span>), (<span class="number">2</span>,<span class="number">3.</span>,<span class="string">"World"</span>)]</div><div class="line">pd.DataFrame(data)</div><div class="line"><span class="comment"># From a list of dicts</span></div><div class="line">data2 = [&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;, &#123;<span class="string">'a'</span>: <span class="number">5</span>, <span class="string">'b'</span>: <span class="number">10</span>, <span class="string">'c'</span>: <span class="number">20</span>&#125;]</div><div class="line">pd.DataFrame(data2)</div></pre></td></tr></table></figure>
<h3 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">df.index</div><div class="line">df.values</div><div class="line">df.columns</div><div class="line">df.ix[[<span class="string">'a'</span>, <span class="string">'b'</span>]] <span class="keyword">or</span> df.ix[df.index[<span class="number">1</span>:<span class="number">3</span>]]</div><div class="line">df.size</div></pre></td></tr></table></figure>
<h3 id="Indexing-Selection"><a href="#Indexing-Selection" class="headerlink" title="Indexing, Selection"></a>Indexing, Selection</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Index</span></div><div class="line">df.loc[<span class="string">'b'</span>]</div><div class="line">df.iloc[<span class="number">2</span>]</div><div class="line">df.drop() <span class="comment"># Delete given row or column. Pass axis=1 for columns.</span></div><div class="line">df1 = df1.reindex_like(df1,df2) <span class="comment"># Reindex df1 with index of df2.</span></div><div class="line">df.reindex(new_index)</div><div class="line">df.head(n)</div><div class="line">df.tail(n)</div></pre></td></tr></table></figure>
<h3 id="Function-application"><a href="#Function-application" class="headerlink" title="Function application"></a>Function application</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># apply 函数附加</span></div><div class="line">df.apply(numpy.sum, axis=<span class="number">1</span>) <span class="comment"># equiv to df.sum(1)</span></div><div class="line"><span class="comment"># groupby</span></div><div class="line">data.groupby([<span class="string">'col1'</span>, <span class="string">'col2'</span>])[<span class="string">'col3'</span>].mean()</div><div class="line"><span class="comment"># rolling</span></div><div class="line">df.rolling(<span class="number">2</span>, win_type=<span class="string">'blackman'</span>).sum()</div><div class="line">df.rolling(<span class="number">20</span>).mean() <span class="comment"># 移动平均线</span></div><div class="line">current_price &lt; stock.rolling(window=<span class="number">50</span>).min()</div><div class="line">df.apply(numpy.sum, axis=<span class="number">0</span>) <span class="comment"># equiv to df.sum(0)</span></div><div class="line">df.applymap() <span class="comment"># df = df.applymap(lambda x: '%.2f' % x) 对每个元素使用</span></div></pre></td></tr></table></figure>
<h3 id="Computations"><a href="#Computations" class="headerlink" title="Computations"></a>Computations</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sum(axis) <span class="comment"># df.sum(axis=0)</span></div><div class="line">cumsum(axis) <span class="comment"># 累计求和</span></div><div class="line">mean(axis)</div><div class="line">std(axis)</div><div class="line">describe()</div><div class="line">max(axis)</div><div class="line">corr() <span class="comment"># method : &#123;‘pearson’, ‘kendall’, ‘spearman’&#125;</span></div><div class="line">df.count() <span class="comment"># Returns Series of row counts for every column.</span></div></pre></td></tr></table></figure>
<h3 id="Combining"><a href="#Combining" class="headerlink" title="Combining"></a>Combining</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">df.append(df2, ignore_index=<span class="keyword">True</span>)</div><div class="line">caller.join(other.set_index(<span class="string">'key'</span>), on=<span class="string">'key'</span>) <span class="comment"># 主要用于index合并。how默认left向左合并 outer并集</span></div><div class="line">A.merge(B, left_on=<span class="string">'lkey'</span>, right_on=<span class="string">'rkey'</span>, how=<span class="string">'outer'</span>) <span class="comment"># 根据其中一列的键值合并</span></div><div class="line">concat() <span class="comment"># Series的合并</span></div></pre></td></tr></table></figure>
<h3 id="Time-series-related"><a href="#Time-series-related" class="headerlink" title="Time series-related"></a>Time series-related</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df/df.shift(<span class="number">1</span>) <span class="comment"># 数据向后移动n个index</span></div></pre></td></tr></table></figure>
<h3 id="Missing-data-handling"><a href="#Missing-data-handling" class="headerlink" title="Missing data handling"></a>Missing data handling</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fillna(method=<span class="string">'ffill'</span>) <span class="comment"># front fill 使用前面的数据填充, 避免前视问题</span></div><div class="line">df.dropna() <span class="comment"># Drops rows where any data is missing.</span></div></pre></td></tr></table></figure>
<h3 id="Reshaping-sorting-transposing"><a href="#Reshaping-sorting-transposing" class="headerlink" title="Reshaping, sorting, transposing"></a>Reshaping, sorting, transposing</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">df.sort_index</div><div class="line">df.sort_values</div><div class="line"><span class="comment"># pivot Reshape data (produce a “pivot” table) based on column values.</span></div><div class="line">df.pivot(index=<span class="string">'foo'</span>, columns=<span class="string">'bar'</span>, values=<span class="string">'baz'</span>)</div><div class="line"><span class="comment"># stack</span></div><div class="line">df.stack/unstack</div></pre></td></tr></table></figure>
<h3 id="Plotting"><a href="#Plotting" class="headerlink" title="Plotting"></a>Plotting</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data.plot()</div></pre></td></tr></table></figure>
<h3 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">df.to_csv(‘foo.csv’)</div><div class="line">read_csv(‘foo.csv’)</div><div class="line">to_excel(‘foo.xlsx’, sheet_name)</div><div class="line">read_excel(‘foo.xlsx’,’sheet1’, index_col = <span class="keyword">None</span>, na_values = [‘NA’])</div></pre></td></tr></table></figure>
<h2 id="GroupBy"><a href="#GroupBy" class="headerlink" title="GroupBy"></a>GroupBy</h2><p>Ref:<br>[1]: <a href="http://pandas.pydata.org/pandas-docs/stable/api.html" target="_blank" rel="external">API Reference</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Pandas学习笔记。&lt;/p&gt;
    
    </summary>
    
    
      <category term="pandas" scheme="https://suplandz.github.io/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>量化系统的构建</title>
    <link href="https://suplandz.github.io/2017/01/22/system/"/>
    <id>https://suplandz.github.io/2017/01/22/system/</id>
    <published>2017-01-22T10:00:00.000Z</published>
    <updated>2017-05-02T07:57:48.840Z</updated>
    
    <content type="html"><![CDATA[<p>整理量化策略搭建的主流策略，从数据中发现价值。<br><a id="more"></a></p>
<ol>
<li><h2 id="程序主体的设计："><a href="#程序主体的设计：" class="headerlink" title="程序主体的设计："></a>程序主体的设计：</h2><p>其一，自上而下的构建，通过<strong>交易理念</strong>推导出交易系统，并将其程序化。比如索罗斯的交易系统，便是由他的反射理论，推导构建出的交易程序。其实主要包括两大类：宏观层面和人性层面。<br>其二，大数据观察，统计模型判断，建模，判断规则的漏洞或者是feature(<a href="https://www.zhihu.com/question/23667442/answer/28965906" title="冰山订单策略" target="_blank" rel="external">董可人：冰山策略</a>)。主要是套利类的策略，统计套利，高频做市等。<br>其三，自下而上的构建，通过反复的观察，模式识别，将其程序化。跟第二种比较类似，但是稍有区别，人性的成分更多些，例如热点追击，动量策略源于此。</p>
</li>
<li><h2 id="交易程序的初步检验："><a href="#交易程序的初步检验：" class="headerlink" title="交易程序的初步检验："></a>交易程序的初步检验：</h2><p>交易系统的检验，必须充分考虑手续费和滑点的影响。<br>通常认为，在这一步，系统的胜率应该在50%以上，最大回撤时间不超过90个周期（因不同级别的交易系统不能按统一时间计算），连续亏损次数不超过5次，那么这个系统基本具备持续盈利的能力。</p>
</li>
<li><h2 id="交易系统的优化："><a href="#交易系统的优化：" class="headerlink" title="交易系统的优化："></a>交易系统的优化：</h2><p>谨防overfit，主要是风控部分。</p>
</li>
<li><h2 id="交易系统的外推检验："><a href="#交易系统的外推检验：" class="headerlink" title="交易系统的外推检验："></a>交易系统的外推检验：</h2><p>通过了优化的系统，已经初步成熟，外推检验就像生产线中的质检一样，一个产品能否上市，这是最重要的一个环节，对前期的结论具有一票否决权。<br>外推检验分两种：<br>一种是时间外推，即用更多的数据进行回测，观察交易系统是否稳定。<br>二种是品种外推，如题主的螺纹程序，拿去橡胶，铜，豆粕，股指这些活跃品种上进行回测，甚至在外汇，国外商品，国外股市上进行检验。<br>一套具备实盘盈利前景的系统，必须适用于市场上绝大部分品种的交易。<br>如果不能经过外推检验，那么这个系统很可能只是一个偶然，或者已经过度优化了。</p>
</li>
<li><h2 id="交易系统的实盘使用和维护："><a href="#交易系统的实盘使用和维护：" class="headerlink" title="交易系统的实盘使用和维护："></a>交易系统的实盘使用和维护：</h2><p>很少有系统是能经过第四条检验的，如果走到这一步，恭喜了，你可以相对安心的用它来赚钱了。<br>当然也不是睡睡觉数数钱那么简单，电脑有时候也是会出问题的，这个问题暂且不论，一个非常严重的现象是，行情波动的特征是会变的。<br>其变化表现在：<br>其一，波动特性改变了。<br>举例来说：2005年之前，只要有个最简单最简单的均线系统（上五日线做多，下五日线反手做空），就可以发大财了。但是2005年以后，这样简单的系统获利已经不稳定，而09年以后，基本就不可能再用来获利了。又如前几年，做股指高频交易的人都发财了，我听到最高的一年有30倍，但是现在，高频交易都已经开始自相残杀了。为什么？因为市场上精明的交易者越来越多了，当你的对手还在用肉搏的时候，只要有一把手枪就可以称王，但是现在，大家都已经开上飞机坦克了，战场结构必然变化。<br>其二，交易环境变化。<br>比如今年，期货夜盘的大量推出，导致不同时间段的交易分布不再均匀，很多交易系统便不能适应了。<br>前两年期货很多小合约改成了大合约，也导致了很多微观波动结构的改变。<br>所以交易系统必须时时进行维护和修补，甚至必要时直接宣布它死亡。</p>
</li>
</ol>
<p>从这一点上看，又可以发现，第一步设计交易系统的两种方式的优劣。自下而上开发的系统，永远只是根据开发时期的数据作为样本，日后修改起来将非常频繁，也非常困难，而自上而下开发的系统，它是接近于本质的，而市场波动的本质特征，几百年来都未曾改变，只不过表现方式变了而已。</p>
<h2 id="如何看待交易系统失效"><a href="#如何看待交易系统失效" class="headerlink" title="如何看待交易系统失效"></a>如何看待交易系统失效</h2><p>董可人：<br>理论上，要用科学方法进行分析。市场环境有没有变化？比如波动性有没有异常，延迟水平是否仍保持领先，甚至交易所的规则或策略有无变化，这些都有可能造成影响，需要仔细分析数据才能得出结论。实际上很多时候，仔细分析过就会发现仍有巨大的改进空间。简单说就是一个大胆假设，小心求证，科学化系统化的分析过程，这也是为什么这一行会偏爱PhD，因为和学术研究还挺有相似之处的。现实中，因为决策层和执行层的分离，这个问题的答案基本上是“看心情”。高层或者客户可能根本没有兴趣看你们的细节分析，才不会管你什么科学不科学。如果你在有限的时间内没能拿出一个有效的方案，即便理论上还有很多可能性，人家就会想 “F##k it. We are losing money so we stop”。不相信我说的？请看 @腾天老师名言：“DON’T BE A DICK FOR A PIP”。</p>
<p>小须弥咩：<br>任何一个交易系统，一定要有客观、明确的界定其失效（死亡）的方法。<br>没有任何一个系统是可以一劳永逸的，即便是自上而下的系统，也是会有失效的时候，只不过使用周期比较长，所以必须要有界定其死亡的标准。比如上图的白银系统，最近半年我都没有修改，中间经历了2个多月的调整，我当时判断它死亡的标准是，回撤掉前期利润总和的1/10或者超过3个月，判断为留院观察，再等2月资金曲线不能创新高直接宣布死亡。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理量化策略搭建的主流策略，从数据中发现价值。&lt;br&gt;
    
    </summary>
    
    
      <category term="量化系统" scheme="https://suplandz.github.io/tags/%E9%87%8F%E5%8C%96%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="策略" scheme="https://suplandz.github.io/tags/%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>Git语法备忘录</title>
    <link href="https://suplandz.github.io/2017/01/20/git-command/"/>
    <id>https://suplandz.github.io/2017/01/20/git-command/</id>
    <published>2017-01-20T05:00:00.000Z</published>
    <updated>2017-05-02T08:11:02.503Z</updated>
    
    <content type="html"><![CDATA[<p>主要记录Git的安装配置和基本语法。</p>
<a id="more"></a>
<h2 id="安装配置Git"><a href="#安装配置Git" class="headerlink" title="安装配置Git"></a>安装配置Git</h2><p><a href="https://git-for-windows.github.io/" title="git官网下载" target="_blank" rel="external">Git for Windows</a><br>所有操作在GitBash下进行。<br>注册Github的账号，然后设置Git的用户名和邮箱：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;username&quot;</div><div class="line">git config --global user.email &quot;your email&quot;</div></pre></td></tr></table></figure>
<h2 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h2><ol>
<li>查看是否已有ssh秘钥：<code>cd ~/.ssh</code>，如果有则删除。</li>
<li>生成秘钥<code>ssh-keygen -t rsa -C “email”</code>，采取RSA加密，如果不设置密码则按三次回车即可，秘钥可通过<code>cd ~/.ssh</code>查看。Git中<code>~</code>表示的是<code>User\Username</code>这个文件夹。</li>
<li>在Github上添加SSH，Setting/SSH and GPG keys，复制rsa.pub的内容上去即可。测试代码<code>ssh -T git@github.com</code>，如果显示<em>You’ve successfully authenticated, but GitHub does not provide shell access</em>就说明成功了。</li>
<li>Push时使用SSH认证：在你下载的项目文件夹中有隐藏的<code>.git</code>目录，打开config，修改<code>url = https://...</code>为SSH的地址，地址显示在你的github项目中Clone or download里，切换为Use SSH就可以看到了。</li>
<li>Mac OS X 中显示隐藏文件的命令是<code>defaults write com.apple.finder AppleShowAllFiles -bool true</code>取消显示则改为false即可，重启Finder。CMD+Option+ESC调出。</li>
</ol>
<h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><ol>
<li>先cd到你需要clone的位置，执行git clone命令。</li>
<li>cd 到项目文件夹。</li>
<li><code>git add .</code>添加所有文件</li>
<li><code>git commit -m &quot;revise info&quot;</code>提交修改信息</li>
<li><code>git push origin</code>提交远程仓库，如果完成了配置中的第四步就不需要输入密码了。Enjoy。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要记录Git的安装配置和基本语法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://suplandz.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown语法</title>
    <link href="https://suplandz.github.io/2017/01/18/how-to-use-markdown/"/>
    <id>https://suplandz.github.io/2017/01/18/how-to-use-markdown/</id>
    <published>2017-01-18T05:00:00.000Z</published>
    <updated>2017-05-02T07:57:51.640Z</updated>
    
    <content type="html"><![CDATA[<p>MarkDown语法笔记。<br><a id="more"></a><br>如果你想要依赖 Markdown 来插入 <code>&lt;br /&gt;</code> 标签的话，在插入处先按入两个以上的空格然后回车。</p>
<h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><p>Sublime + 一款配色主题即可。主题文件放在 <code>Sublime/Preferences/Browse Packages</code><br>或者ATOM + 自带的preview（control + shift + M）。</p>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="section"># 这是 H1</span></div><div class="line"><span class="section"># 这是 H1 #</span></div><div class="line"><span class="section">## 这是 H2 ##</span></div><div class="line"><span class="section">### 这是 H3 #####</span></div></pre></td></tr></table></figure>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="quote">&gt; 1.   这是第一行列表项。</span></div><div class="line"><span class="quote">&gt; 2.   这是第二行列表项。</span></div><div class="line"><span class="quote">&gt; &gt; 给出一些例子代码：</span></div><div class="line"><span class="quote">&gt;     return shell_exec("echo $input | $markdown_script");</span></div></pre></td></tr></table></figure>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">*   </span>Red</div><div class="line"><span class="bullet">+   </span>Green</div><div class="line"><span class="bullet">-   </span>Blue</div></pre></td></tr></table></figure>
<p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">*  </span>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</div><div class="line">   Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</div><div class="line">   viverra nec, fringilla in, laoreet vitae, risus.</div></pre></td></tr></table></figure>
<p>有些情况下项目列表很可能会不小心产生</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1986. </span>What a great season.</div></pre></td></tr></table></figure>
<p>要避免这样的状况，你可以在句点前面加上反斜杠。</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1986\. What a great season.</div></pre></td></tr></table></figure>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>冒号代表左对齐。<br><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">| Header One     | Header Two     |</div><div class="line">| :------------- | :------------- |</div><div class="line">| Item One       | Item Two       |</div></pre></td></tr></table></figure></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>只要简单地缩进 4 个空格或是 1 个制表符就可以。<br>如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Use the <span class="code">`printf()`</span> function.</div></pre></td></tr></table></figure>
<p>大段代码在前后插入<code>```</code>，例如：<br><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="code">```python</span></div><div class="line">some python code</div><div class="line">```</div></pre></td></tr></table></figure></p>
<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span><span class="bullet">* *</span></div><div class="line"><span class="emphasis">***</span></div><div class="line"><span class="strong">*****</span></div><div class="line"><span class="section">- - -</span></div><div class="line">---------------------------------------</div></pre></td></tr></table></figure>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h3><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">This is [<span class="string">an example</span>](<span class="link">http://example.com/ "Optional Title"</span>) inline link.</div><div class="line">[<span class="string">This link</span>](<span class="link">http://example.net/</span>) has no title attribute.</div></pre></td></tr></table></figure>
<p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">See my [<span class="string">About</span>](<span class="link">/about/</span>) page for details.</div></pre></td></tr></table></figure>
<h3 id="参考式"><a href="#参考式" class="headerlink" title="参考式"></a>参考式</h3><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">This is [<span class="string">an example</span>][<span class="symbol">id</span>] reference-style link. id 不区分大小写</div></pre></td></tr></table></figure>
<p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">id</span>]: <span class="link">http://example.com/  "Optional Title Here"</span></div><div class="line">[<span class="symbol">id</span>]: <span class="link">http://example.com/  </span></div><div class="line"><span class="code">      "Optional Title Here"</span></div></pre></td></tr></table></figure>
<p>隐式链接标记可以省略id</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="string">Google</span>][<span class="symbol"></span>]</div><div class="line">[<span class="symbol">Google</span>]: <span class="link">http://google.com/</span></div></pre></td></tr></table></figure>
<p>也可以采用参考文献式</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">I get 10 times more traffic from [Google] [1] than from</div><div class="line">[Yahoo] [2] or [MSN] [3].</div><div class="line">[<span class="symbol">1</span>]: <span class="link">http://google.com/        "Google"</span></div><div class="line">[<span class="symbol">2</span>]: <span class="link">http://search.yahoo.com/  "Yahoo Search"</span></div><div class="line">[<span class="symbol">3</span>]: <span class="link">http://search.msn.com/    "MSN Search"</span></div></pre></td></tr></table></figure>
<p><code>&lt;http://example.com/&gt;</code> 尖括号包起来会自动把它转成链接。</p>
<h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>Markdown 使用星号（<em>）作为标记强调字词的符号，被 </em> 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围，用两个 * 包起来的话，则会被转成 <code>&lt;strong&gt;</code>，例如：</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="emphasis">*single asterisks*</span>  # &lt;/em&gt; 斜体</div><div class="line"><span class="strong">**double asterisks**</span>  # &lt;/strong&gt; 加粗</div></pre></td></tr></table></figure>
<p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\<span class="emphasis">*this text is surrounded by literal asterisks\*</span></div></pre></td></tr></table></figure>
<p>删除线，使用~~</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~~需删除的内容~~</div></pre></td></tr></table></figure>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="行内式-1"><a href="#行内式-1" class="headerlink" title="行内式"></a>行内式</h3><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">![<span class="string">Alt text</span>](<span class="link">/path/to/img.jpg</span>)</div><div class="line">![<span class="string">Alt text</span>](<span class="link">/path/to/img.jpg "Optional title"</span>)</div></pre></td></tr></table></figure>
<h3 id="参考式-1"><a href="#参考式-1" class="headerlink" title="参考式"></a>参考式</h3><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">![<span class="string">Alt text</span>][<span class="symbol">id</span>]</div><div class="line">[<span class="symbol">id</span>]: <span class="link">url/to/image  "Optional title attribute"</span></div></pre></td></tr></table></figure>
<p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的<code>&lt;img&gt;</code>标签。</p>
<p><a href="http://wowubuntu.com/markdown/index.html#blockquote" target="_blank" rel="external">参考资料</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MarkDown语法笔记。&lt;br&gt;
    
    </summary>
    
    
      <category term="markdown" scheme="https://suplandz.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Useful links</title>
    <link href="https://suplandz.github.io/2017/01/17/useful-links/"/>
    <id>https://suplandz.github.io/2017/01/17/useful-links/</id>
    <published>2017-01-17T11:00:56.000Z</published>
    <updated>2017-05-02T07:57:52.125Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="http://blog.csdn.net/zhang1027963459/article/details/50478340" target="_blank" rel="external">Git代码</a></li>
<li><a href="https://bigballon.github.io/" target="_blank" rel="external">爬虫相关</a></li>
<li><a href="http://www.jianshu.com/u/03a93cbd0eae" target="_blank" rel="external">爬虫相关 漫画</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/zhang1027963459/article/details/50478340&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从零博客之路</title>
    <link href="https://suplandz.github.io/2017/01/16/blog-set-up/"/>
    <id>https://suplandz.github.io/2017/01/16/blog-set-up/</id>
    <published>2017-01-16T09:00:56.000Z</published>
    <updated>2017-05-02T07:58:29.127Z</updated>
    
    <content type="html"><![CDATA[<p>从零教你搭博客。<br><a id="more"></a><br>Github Pages基于静态页面，目前有两大主流框架，分别是Hexo和Jekyll。两个框架我都用过一段时间，最终我还是决定Hexo，无他，唯主题好看。两种框架都是用markdown语法，下面简单介绍下两种不同框架的搭建。</p>
<h2 id="Jekyll框架"><a href="#Jekyll框架" class="headerlink" title="Jekyll框架"></a>Jekyll框架</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol>
<li><a href="http://rubyinstaller.org/downloads" target="_blank" rel="external">安装Ruby</a><br>Jekyll是使用ruby语言进行开发的，所以我们第一步需要安装ruby以及ruby相关的开发工具。安装的时候在<code>Add Ruby executables to your PATH</code>打勾。接下来安装相应版本的Development Kit。<br>Development Kit的安装方法：<pre><code>$ cd to it
$ ruby dk.rb init
$ ruby dk.rb
</code></pre>如果不成功:<pre><code>$ ruby dk.rb -f
</code></pre></li>
<li>安装Jekyll  <pre><code>$ gem install jekyll  
$ jekyll new blog
$ cd blog
$ jekyll serve
</code></pre>打开浏览器输入网址<code>http://127.0.0.1:4000/</code>就可以看原生的Jekyll博客了！<br>PS: Mac OS X出现权限问题在命令前加上sudo。</li>
</ol>
<h3 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h3><p>以安装<a href="https://github.com/Simpleyyt/jekyll-jacman" target="_blank" rel="external">Jacman主题</a>为例：</p>
<pre><code>$ ruby --version # 确保已安装Ruby 2.1.0 或更高版本
$ gem install bundler # 安装Bundler
$ git clone https://github.com/Simpleyyt/jekyll-jacman.git # 下载 Jacman 主题
$ cd jekyll-jacman
$ bundle install # 安装依赖
$ bundle exec jekyll server # 运行 Jekyll
</code></pre><p>安装bundler可能会受网络影响，可以把Gems Source换成<a href="https://gems.ruby-china.org/" target="_blank" rel="external">gems.ruby-china.org</a>：</p>
<pre><code>$ bundle config mirror.https://rubygems.org https://gems.ruby-china.org
</code></pre><p>如果遇到SSL证书问题，你又无法解决，请直接用 <code>http://gems.ruby-china.org</code> （https替换为http）避免。（<a href="https://github.com/ruby-china/rubygems-mirror/wiki" target="_blank" rel="external">另一种解决方式</a>）  </p>
<p><a href="https://github.com/codinfox/codinfox-lanyon" target="_blank" rel="external">Codinfox-lanyon主题</a><br>因为Jekyll升级到3.0之前的一些老插件在Jacman上用不了，加之修改源码的学习成本高，遂换了这款主题。其实之前尝试在默认主题下添加目录导航，但发现Github Pages不支持<a href="https://github.com/jekyll/jekyll-archives" target="_blank" rel="external">jekyll-archives</a>， 只能修改前端源码，由于缺乏必要的前端知识，还是放弃折腾了。<br>安装过程很简单，直接clone下来，修改下配置文件，替换原始文件（除了 <code>.git</code> ）即可。</p>
<h2 id="Hexo框架"><a href="#Hexo框架" class="headerlink" title="Hexo框架"></a>Hexo框架</h2><h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol>
<li>Hexo基于Node.js，所以先<a href="https://nodejs.org/en/" target="_blank" rel="external">安装Node.js</a>。然后<a href="https://git-scm.com/" target="_blank" rel="external">安装Git</a>。</li>
<li>安装Hexo<pre><code>$ npm install -g hexo-cli
</code></pre> 安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。<pre><code>$ hexo init &lt;folder&gt;
$ cd &lt;folder&gt;
$ npm install
$ hexo g # 或者hexo generate
$ hexo s # 或者hexo server，可以在http://localhost:4000/ 查看
</code></pre> npm的安装有时候会因为网络问题卡住，这时候多试几次，目前没啥好办法。</li>
</ol>
<h3 id="主题安装-1"><a href="#主题安装-1" class="headerlink" title="主题安装"></a>主题安装</h3><p>下载主题包放在 <code>themes</code> 文件夹内，然后修改 <code>_config.yml</code> 内的 <code>theme</code> 设定，即可切换主题。本人使用的是<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">next主题</a>。</p>
<h3 id="常用的Hexo命令"><a href="#常用的Hexo命令" class="headerlink" title="常用的Hexo命令"></a>常用的Hexo命令</h3><pre><code>$ hexo generate (hexo g) # 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹
$ hexo server (hexo s) # 启动本地web服务，用于博客的预览
$ hexo deploy (hexo d) # 部署播客到远端（比如github, heroku等平台）
$ hexo new &quot;postName&quot; # 新建文章
$ hexo new page &quot;pageName&quot; # 新建页面
</code></pre><h3 id="部署到Github-Pages"><a href="#部署到Github-Pages" class="headerlink" title="部署到Github Pages"></a>部署到Github Pages</h3><ol>
<li>安装扩展<pre><code>$ npm install hexo-deployer-git --save
</code></pre>需要先配置好ssh秘钥。</li>
<li>修改 <code>_config.yml</code><pre><code>deploy:
  type: git
  repo: git@github.com:jiji262/jiji262.github.io.git
  branch: master
</code></pre>然后执行<pre><code>$ hexo d
</code></pre>即上传到了Github。<br>当然如果你喜欢使用git命令的话可以直接在 <code>$ hexo g</code> 生成的 <code>public</code> 文件夹下添加 <code>.git</code> 文件夹，结合ATOM直接 <code>$ git push</code> ，这样可以添加自定义的commit修改记录。</li>
</ol>
<h3 id="Jekyll的迁移"><a href="#Jekyll的迁移" class="headerlink" title="Jekyll的迁移"></a>Jekyll的迁移</h3><p>把 <code>_posts</code> 文件夹内的所有文件复制到 <code>source/_posts</code> 文件夹，并在 <code>_config.yml</code> 中修改 <code>new_post_name</code> 参数。</p>
<pre><code>new_post_name: :year-:month-:day-:title.md
</code></pre><h3 id="表格CSS优化"><a href="#表格CSS优化" class="headerlink" title="表格CSS优化"></a>表格CSS优化</h3><p>表格宽度自动：<br><code>blog\themes\next\source\css\_common\scaffolding\tables.styl</code>修改<code>table-layout: automatic;</code><br>表格样式修改：<br>在<code>blog\themes\next\source\css\_custom\custom.styl</code>增加以下内容：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">table</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>; <span class="comment">/*表格宽度*/</span></div><div class="line">    <span class="attribute">max-width</span>: <span class="number">65em</span>; <span class="comment">/*表格最大宽度，避免表格过宽*/</span></div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dedede</span>; <span class="comment">/*表格外边框设置*/</span></div><div class="line">    <span class="attribute">margin</span>: <span class="number">15px</span> auto; <span class="comment">/*外边距*/</span></div><div class="line">    <span class="attribute">border-collapse</span>: collapse; <span class="comment">/*使用单一线条的边框*/</span></div><div class="line">    <span class="attribute">empty-cells</span>: show; <span class="comment">/*单元格无内容依旧绘制边框*/</span></div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</div><div class="line">    <span class="attribute">table-layout</span>: automatic;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">table</span> <span class="selector-tag">th</span>,<span class="selector-tag">table</span> <span class="selector-tag">td</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">35px</span>; <span class="comment">/*统一每一行的默认高度*/</span></div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dedede</span>; <span class="comment">/*内部边框样式*/</span></div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>; <span class="comment">/*内边距*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-tag">table</span> <span class="selector-tag">th</span> &#123;</div><div class="line">    <span class="attribute">font-weight</span>: bold; <span class="comment">/*加粗*/</span></div><div class="line">    <span class="attribute">text-align</span>: center <span class="meta">!important</span>; <span class="comment">/*内容居中，加上 !important 避免被 Markdown 样式覆盖*/</span></div><div class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(158,188,226,0.2); <span class="comment">/*背景色*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-tag">table</span> <span class="selector-tag">th</span> &#123;</div><div class="line">    <span class="attribute">white-space</span>: nowrap; <span class="comment">/*表头内容强制在一行显示*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-tag">table</span> <span class="selector-tag">td</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</div><div class="line">  <span class="comment">/*首列不换行*/</span></div><div class="line">    <span class="attribute">white-space</span>: nowrap;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">table</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#efefef</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="关联Github"><a href="#关联Github" class="headerlink" title="关联Github"></a>关联Github</h2><ol>
<li>安装Git<br><a href="https://git-for-windows.github.io/" target="_blank" rel="external">Git for Windows</a></li>
<li>配置Git<br>参考<a href="/2017/01/20/git-command/" title="Git语法备忘录">Git语法备忘录</a></li>
</ol>
<h2 id="撰写博客"><a href="#撰写博客" class="headerlink" title="撰写博客"></a>撰写博客</h2><ul>
<li><p>Jekyll和Hexo都识别<a href="/memo/2017/01/18/how-to-use-markdown/">markdown语法</a>，<del>MD编辑器我使用的是sublime，简洁好用</del> 使用ATOM作为MD的编辑器，control + shift + M 自动调出预览效果。<br>博文放在目录<code>_post</code>下面，按照日期-标题的命名规则新建markdown后缀的文件，打开文件后输入必要的YML信息，具体可以参考自带的示例。编辑好文章后就可以使用Git push上去了。Jekyll会自动转化相应的静态网页。</p>
<p>Push的时候可以使用ATOM的Git Plus插件（需要先<a href="https://suplandz.github.io/memo/2017/01/20/git-command/">配置Git Bash</a>），安装好之后不需要在Git Plus中修改参数，path直接用默认的git即可（可以在cmd中使用git确认是否在环境中配置成功）。在ATOM-FILE-ADD PROJECT FOLDER加入Repository，因为文件夹包含git子文件夹，atom会自动识别，随后使用control + shift + A添加文件，control + shift + X添加评论，最后鼠标点个Push即可。如果没有成功的确认下Git Bash有没有配置成功。</p>
</li>
</ul>
<h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><p>微信链接的图片尺寸必须大于： 300px × 300px，打入如下代码隐藏图片</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: none;"</span></span></div><div class="line">    <span class="attr">document.getElementById</span>("<span class="attr">typediv1</span>")<span class="attr">.style.display</span>=<span class="string">"none"</span>;&gt;</div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/img/git.jpg"</span> &gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>参考资料：</p>
<ol>
<li><a href="https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/" target="_blank" rel="external">手把手教你使用Hexo + Github Pages搭建个人独立博客</a></li>
<li><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT主题配置</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从零教你搭博客。&lt;br&gt;
    
    </summary>
    
    
      <category term="jekyll" scheme="https://suplandz.github.io/tags/jekyll/"/>
    
      <category term="hexo" scheme="https://suplandz.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
